"use strict";(self.webpackChunkphaser_plus_docs=self.webpackChunkphaser_plus_docs||[]).push([[168],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=o.createContext({}),u=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(r),f=n,m=p["".concat(i,".").concat(f)]||p[f]||d[f]||a;return r?o.createElement(m,s(s({ref:t},l),{},{components:r})):o.createElement(m,s({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:n,s[1]=c;for(var u=2;u<a;u++)s[u]=r[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4866:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:1},s="Project structure",c={unversionedId:"guide/project-structure",id:"guide/project-structure",title:"Project structure",description:"Proposed folder structure for large game projects",source:"@site/docs/guide/project-structure.md",sourceDirName:"guide",slug:"/guide/project-structure",permalink:"/docs/guide/project-structure",draft:!1,editUrl:"https://github.com/kalevski/phaser-plus/tree/main/_docs/docs/guide/project-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guide",permalink:"/docs/category/guide"},next:{title:"Create game object",permalink:"/docs/guide/create-object"}},i={},u=[],l={toc:u};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"project-structure"},"Project structure"),(0,n.kt)("p",null,"Proposed folder structure for large game projects"),(0,n.kt)("p",null,'Phaser does not enforce any particular pattern for writing complex applications, so developers are free to choose the design pattern that works best for them. There is no "best project architecture" that will fit every project and coding style, but it is always important to structure your project in a logical and organized manner.'),(0,n.kt)("p",null,"The following is a proposed folder structure that may work well in many cases, but it is not intended to be followed strictly. You should adapt it to meet the needs of your specific project."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," \u2500 public\n   \u2514\u2500 assets - directory for assets of your game (textures, audio files, bitmap fonts, etc.)\n \u2500 src\n   \u251c\u2500 index.js - entrypoint of the application\n   \u251c\u2500 index.html - html index file\n   \u251c\u2500 config.js - phaser config file\n   \u251c\u2500 scenes - directory for the scenes of the game\n   \u251c\u2500 features - directory used to store game features\n   \u251c\u2500 prefabs - directory for all your game object classes\n   \u251c\u2500 services - classes for integration of external services\n   \u2514\u2500 events - separate all game events into dedicated classes inside this directory\n \u2500 package.json\n")))}p.isMDXComponent=!0}}]);